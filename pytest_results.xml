<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="9" time="6.304" timestamp="2025-09-29T17:58:08.876305+08:00" hostname="606deMacBook-Air.local"><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_fetch_latest_data_method_exists" time="0.001" /><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_fetch_historical_data_method_exists" time="0.000" /><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_cloud_data_functionality" time="0.001" /><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_enhanced_data_flow_system_initialization" time="0.002" /><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_smart_realtime_optimizer_initialization" time="0.000"><failure message="TypeError: SmartRealtimeOptimizer.__init__() missing 1 required positional argument: 'api_system'">self = &lt;tests.test_data_flow_system.TestDataFlowSystem object at 0x1030c2e70&gt;

    def test_smart_realtime_optimizer_initialization(self):
        """测试智能实时优化器初始化"""
&gt;       optimizer = SmartRealtimeOptimizer()
                    ^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: SmartRealtimeOptimizer.__init__() missing 1 required positional argument: 'api_system'

tests/test_data_flow_system.py:71: TypeError</failure></testcase><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_data_flow_system_database_tables" time="0.002" /><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_data_flow_system_start" time="0.003"><failure message="AssertionError: assert False&#10; +  where False = hasattr(&lt;enhanced_data_flow_system.EnhancedDataFlowSystem object at 0x1030cec10&gt;, 'start')">self = &lt;tests.test_data_flow_system.TestDataFlowSystem object at 0x103104490&gt;
mock_backfill = &lt;MagicMock name='_historical_data_backfill' id='4346538912'&gt;
mock_pull = &lt;MagicMock name='_realtime_data_pull' id='4346539584'&gt;

    @patch('enhanced_data_flow_system.EnhancedDataFlowSystem._realtime_data_pull')
    @patch('enhanced_data_flow_system.EnhancedDataFlowSystem._historical_data_backfill')
    def test_data_flow_system_start(self, mock_backfill, mock_pull):
        """测试数据流转系统启动"""
        flow_system = EnhancedDataFlowSystem(self.api_config, self.test_db)
    
        # 模拟方法调用
        mock_pull.return_value = None
        mock_backfill.return_value = None
    
        # 测试系统启动（不实际运行调度器）
&gt;       assert hasattr(flow_system, 'start')
E       AssertionError: assert False
E        +  where False = hasattr(&lt;enhanced_data_flow_system.EnhancedDataFlowSystem object at 0x1030cec10&gt;, 'start')

tests/test_data_flow_system.py:100: AssertionError</failure></testcase><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_data_collection_methods_exist" time="0.002"><failure message="AssertionError: assert False&#10; +  where False = hasattr(&lt;enhanced_data_flow_system.EnhancedDataFlowSystem object at 0x10312a650&gt;, '_batch_save_optimized_data')">self = &lt;tests.test_data_flow_system.TestDataFlowSystem object at 0x103076550&gt;

    def test_data_collection_methods_exist(self):
        """测试数据采集方法存在"""
        flow_system = EnhancedDataFlowSystem(self.api_config, self.test_db)
    
        # 验证关键方法存在
        assert hasattr(flow_system, '_realtime_data_pull')
        assert hasattr(flow_system, '_historical_data_backfill')
        assert hasattr(flow_system, '_convert_to_optimized_format')
&gt;       assert hasattr(flow_system, '_batch_save_optimized_data')
E       AssertionError: assert False
E        +  where False = hasattr(&lt;enhanced_data_flow_system.EnhancedDataFlowSystem object at 0x10312a650&gt;, '_batch_save_optimized_data')

tests/test_data_flow_system.py:115: AssertionError</failure></testcase><testcase classname="tests.test_data_flow_system.TestDataFlowSystem" name="test_performance_monitoring_setup" time="0.002"><failure message="TypeError: argument of type 'DataFlowMetrics' is not iterable">self = &lt;tests.test_data_flow_system.TestDataFlowSystem object at 0x103076a50&gt;

    def test_performance_monitoring_setup(self):
        """测试性能监控设置"""
        flow_system = EnhancedDataFlowSystem(self.api_config, self.test_db)
    
        # 验证性能监控属性
        assert hasattr(flow_system, 'metrics')
        assert hasattr(flow_system, 'performance_monitor')
    
        # 验证指标初始化
&gt;       assert 'realtime_pulls' in flow_system.metrics
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: argument of type 'DataFlowMetrics' is not iterable

tests/test_data_flow_system.py:132: TypeError</failure></testcase></testsuite></testsuites>